import { Context } from "../context.class";
export type TPragmaHandlerFn = (ctx: Context, pragma: string) => boolean;
type TPragmaDef = {
    handlerFn: TPragmaHandlerFn | null;
    isBlock: boolean;
};
type TPragmaDefs = Record<string, TPragmaDef>;
export declare const tokens: {
    IF: string;
    ELSE: string;
    REPEAT: string;
    FOR: string;
    DEFINE: string;
    MACRO: string;
    OPT: string;
    OPTION: string;
    TEXT: string;
    CSTR: string;
    CSTRING: string;
    ASCIIZ: string;
    PSTR: string;
    PSTRING: string;
    PSTRL: string;
    PSTRINGL: string;
    END: string;
    OUT: string;
    ECHO: string;
    LOG: string;
    WARNING: string;
    ERROR: string;
    LST: string;
    LIST: string;
    LISTING: string;
    CPU: string;
    SETCPU: string;
    PROCESSOR: string;
    ORG: string;
    SEGMENT: string;
    ALIGN: string;
    FILL: string;
    DS: string;
    RES: string;
    HEX: string;
    DB: string;
    BYTE: string;
    DW: string;
    WORD: string;
    DL: string;
    LONG: string;
    DBYTE: string;
    DWORD: string;
    INCLUDE: string;
    FUNCTION: string;
    NAMESPACE: string;
    EXPORT: string;
    LET: string;
};
export declare const pragmaDefs: TPragmaDefs;
export declare function isPragmaToken(ctx: Context): boolean;
export declare function isBlockPragma(ctx: Context): boolean;
export {};
