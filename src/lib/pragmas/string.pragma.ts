import { Context } from "../context.class";
import { VAParseError } from "../helpers/errors.class";
import { TOKEN_TYPES } from "../lexer/token.class";
import { parseExpression } from "../parsers/expression/expression.parser";

const CSTR_TOKENS = ["CSTRING", "CSTR", "ASCIIZ"];
const PSTR_TOKENS = ["PSTRING", "PSTR", "PSTRINGL", "PSTRL"];
const PLONG_TOKENS = ["PSTRINGL", "PSTRL"];

type TStringOptions = {
	hasTrailingZero?: boolean;
	hasLeadingLength?: boolean;
	lengthSize?: number;
	charSize: number;
};

export function processText(ctx: Context, pragma: string) {
	const opts: TStringOptions = {
		hasTrailingZero: CSTR_TOKENS.includes(pragma),
		hasLeadingLength: PSTR_TOKENS.includes(pragma),
		lengthSize: PLONG_TOKENS.includes(pragma) ? 2 : 1,
		charSize: 1,
	};

	if (!ctx.lexer.token()) throw new VAParseError("STRING: missing a string here");

	while (ctx.lexer.token()) {
		const res = parseExpression(ctx, new Set([TOKEN_TYPES.COMMA]));
		switch (res?.type) {
			case TOKEN_TYPES.STRING: {
				const buffer = makeString(ctx, res.value as string, opts);
				ctx.code.emits(ctx.pass, buffer, true);
				break;
			}
			default:
				throw new VAParseError(`STRING: Invalid Type "${res?.type}". Must be a string`);
		}
		if (!ctx.lexer.isToken(TOKEN_TYPES.COMMA)) return false;
		ctx.lexer.next();
	}

	return true;
}

export function makeString(ctx: Context | null, str: string, opts: TStringOptions) {
	const buffer = [];
	let char: number;

	for (let idx = 0; idx < str.length; idx++) {
		if (opts.charSize < 0) for (let padIdx = 1; padIdx < -opts.charSize; padIdx++) buffer.push(0);

		char = str.charCodeAt(idx);
		if (char >= 0x100) throw new VAParseError(`STRING: Invalid character ${str[idx]}`);

		if (char === 92) {
			// \
			idx++;
			if (idx >= str.length) throw new VAParseError(`STRING: Invalid character ${str[idx - 1]}`);

			switch (str[idx]) {
				case "\\":
					char = "\\".charCodeAt(0);
					break;
				case "n":
					char = "\n".charCodeAt(0);
					break;
				case "r":
					char = "\r".charCodeAt(0);
					break;
				case "t":
					char = "\t".charCodeAt(0);
					break;
				case "b":
					char = "\b".charCodeAt(0);
					break;
				case "f":
					char = "\f".charCodeAt(0);
					break;
				case "'":
					char = "'".charCodeAt(0);
					break;
				case '"':
					char = '"'.charCodeAt(0);
					break;
				case "0":
					char = 0;
					break;
				case "x": {
					idx += 2;
					if (idx >= str.length) throw new VAParseError(`STRING: Invalid character ${str[idx - 2]}`);
					const hex = str.slice(idx - 1, idx + 1);
					char = parseInt(`0x${hex}`, 16);
					if (Number.isNaN(char)) throw new VAParseError(`STRING: Invalid hexa value ${hex}`);
					break;
				}
				default:
					throw new VAParseError(`STRING: Invalid character ${str[idx]}`);
			}
		}

		if (ctx) char = ctx.charMapManager.convertChar(char);

		buffer.push(char);

		if (opts.charSize > 0) for (let padIdx = 1; padIdx < opts.charSize; padIdx++) buffer.push(0);
	}

	if (opts.hasTrailingZero) buffer.push(0);

	if (opts.hasLeadingLength) {
		const len = buffer.length;
		if (opts?.lengthSize === 2) buffer.unshift((len & 0xff00) >> 8);
		buffer.unshift(len & 0xff);
	}

	return buffer;
}

// // const reStr= /\s+(".*?")\s*$/i;
// const quotes= ["'", '"'];

// export function encodePetscii(b) {
// 	if (b >= 0x41 && b <= 0x5A) return b | 0x80; // A..Z
// 	if (b >= 0x61 && b <= 0x7A) return b - 0x20; // a..z
// 	return b;
// }

const petscii = [
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12,
	0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25,
	0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
	0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b,
	0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x5b, 0x5c, 0x5d, 0x5e,
	0x5f, 0x60, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51,
	0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84,
	0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
	0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa,
	0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd,
	0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0,
	0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3,
	0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
	0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
];
